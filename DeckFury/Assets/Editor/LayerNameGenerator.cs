using UnityEditor;
using System.Text;
using System.IO;
using UnityEngine;

/// <summary>
/// Looks through all the layers in the project and dynamically generates an enum which contains the names of all the
/// layers in the project. Allows referencing of layers using enums rather than manually typed strings, which is both 
/// error-prone and inflexible.
/// </summary>
public class LayerNameGenerator
{
    private const string EnumName = "LayerNames";
    private static readonly string OutputPath = "Assets/Scripts/Enums/" + EnumName + ".cs";

    [MenuItem("Tools/Generate Layer Names Enum")]
    public static void GenerateLayerNamesEnum()
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// This code was generated by a tool.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if");
        sb.AppendLine("// the code is regenerated.");
        sb.AppendLine("public enum " + EnumName);
        sb.AppendLine("{");

        foreach (string layer in UnityEditorInternal.InternalEditorUtility.layers)
        {
            string validEnumName = MakeValidEnumName(layer);
            sb.AppendLine($"    {validEnumName} = {LayerMask.NameToLayer(layer)},");
        }

        sb.AppendLine("}");

        File.WriteAllText(OutputPath, sb.ToString());
        AssetDatabase.Refresh();
    }

    private static string MakeValidEnumName(string name)
    {
        // Replace spaces and other invalid characters here, if necessary
        // For example, replace spaces with underscores
        string validName = name.Replace(" ", "_");
        // Ensure the name does not begin with a number or invalid character
        if (char.IsDigit(validName[0]) || !char.IsLetter(validName[0]))
        {
            validName = "_" + validName;
        }
        return validName;
    }
}
